
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { type, userId, userName, courseName, certId, issueDate } = await req.json()
    
    if (!type || !userId || !userName || !courseName || !certId) {
      throw new Error('Missing required certificate information')
    }
    
    // In a real implementation, this would generate a PDF using a library
    // For demonstration, we're returning a base64 string that would be a PDF
    
    // Simulate PDF generation (this would be replaced with actual PDF generation code)
    const mockPdfBase64 = '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';
    
    return new Response(
      JSON.stringify({
        success: true,
        pdfBase64: mockPdfBase64,
        certificateId: certId,
        issuedDate: issueDate || new Date().toISOString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  } catch (error) {
    console.error('Error generating certificate:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Failed to generate certificate' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})
